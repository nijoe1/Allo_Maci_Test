import { Logger } from 'loglevel';
import type { CircuitConfig, CircuitSignals, R1CSInfoType, CircomkitConfig, CircomkitConfigOverrides, CircuitInputPathBuilders, CircuitPathBuilders } from './types/';
import { WitnessTester, ProofTester } from './testers/';
import { colors } from './utils/config';
/**
 * Circomkit is an opinionated wrapper around many SnarkJS functions.
 *
 * It abstracts away all the path and commands by providing a simple interface,
 * built around just providing the circuit name and the input name.
 *
 * ```ts
 * const circomkit = new Circomkit()
 * ```
 *
 * It also provides a **WitnessTester** and a **ProofTester** module which use Chai assertions within.
 *
 * ```ts
 * const witnessTester = await circomkit.WitnessTester(circuitName, circuitConfig)
 * const proofTester = await circomkit.ProofTester(circuitName)
 * ```
 */
export declare class Circomkit {
    readonly config: CircomkitConfig;
    readonly logger: Logger;
    private readonly snarkjsLogger;
    constructor(overrides?: CircomkitConfigOverrides);
    /** Parse circuit config from `circuits.json`. */
    private readCircuitConfig;
    /** Computes a path that requires a circuit name. */
    path(circuit: string, type: CircuitPathBuilders): string;
    /** Computes a path that requires a circuit and an input name. */
    pathWithInput(circuit: string, input: string, type: CircuitInputPathBuilders): string;
    /** Given a PTAU name, returns the relative path. */
    pathPtau(ptauName: string): string;
    /** Given a circuit & id name, returns the relative path of the phase-2 PTAU.
     * This is used in particular by Groth16's circuit-specific setup phase. */
    pathZkey(circuit: string, id: number): string;
    /** Colorful logging using the internal logger */
    log(message: string, type?: keyof typeof colors): void;
    /** Clean build files and the `main` component of a circuit. */
    clean(circuit: string): Promise<void>;
    /** Export a verification key (vKey) from a proving key (zKey). */
    vkey(circuit: string, pkeyPath?: string): Promise<string>;
    /** Read the information about the circuit by extracting it from the R1CS file.
     *
     * This implementation follows the specs at [iden3/r1csfile](https://github.com/iden3/r1csfile/blob/master/doc/r1cs_bin_format.md)
     * and is inspired from the work by [PSE's `p0tion`](https://github.com/privacy-scaling-explorations/p0tion/blob/f88bcee5d499dce975d0592ed10b21aa8d73bbd2/packages/actions/src/helpers/utils.ts#L413)
     * and by [Weijiekoh's `circom-helper`](https://github.com/weijiekoh/circom-helper/blob/master/ts/read_num_inputs.ts#L5).
     */
    info(circuit: string): Promise<R1CSInfoType>;
    /** Downloads the phase-1 setup PTAU file for a circuit based on it's number of constraints.
     *
     * The downloaded PTAU files can be seen at [SnarkJS docs](https://github.com/iden3/snarkjs#7-prepare-phase-2).
     * Note that this may take a while if the circuit is large and thus a larger PTAU is needed.
     *
     * This function only works when the used prime is `bn128`.
     *
     * @returns path of the downloaded PTAU file
     */
    ptau(circuit: string): Promise<string>;
    /** Compile the circuit.
     *
     * A circuit configuration can be passed optionally; if not, the
     * config will be read from `circuits.json` at the working directory.
     *
     * @returns path of the build directory
     */
    compile(circuit: string, config?: CircuitConfig): Promise<string>;
    /** Exports a solidity contract for the verifier.
     * @returns path of the exported Solidity contract
     */
    contract(circuit: string): Promise<string>;
    /** Export calldata to call a Verifier contract.
     * @returns calldata
     */
    calldata(circuit: string, input: string): Promise<string>;
    /** Instantiate the `main` component.
     *
     * If `circuitConfig` argument is omitted, this function will look for it at `circuits.json`
     * in the working directory, and throw an error if no entry is found for the circuit.
     *
     * When config is read from file, `dir` defaults to `main`, otherwise `dir` defaults to `test`.
     * This is done to make it so that when CLI is used circuits are created under `main`, and when
     * we use Circomkit programmatically (e.g. during testing) circuits are created under `test`
     * unless specified otherwise.
     *
     * @returns path of the created main component
     */
    instantiate(circuit: string, circuitConfig?: CircuitConfig): string;
    /** Generate a proof.
     *
     * If `data` is not passed, the input data will be read from `inputs/<circuit>/<input>.json`.
     *
     * @returns path of the directory where public signals and proof are created
     */
    prove(circuit: string, input: string, data?: CircuitSignals): Promise<string>;
    /** Commence a circuit-specific setup.
     *
     * If `ptauPath` argument is omitted, this function will try to automatically download it.
     * See the {@link ptau} method for more information about this.
     *
     * @returns path of the verifier key and prover key
     */
    setup(circuit: string, ptauPath?: string): Promise<{
        proverKeyPath: string;
        verifierKeyPath: string;
    }>;
    /** Verify a proof for some public signals.
     * @returns `true` if verification is successful, `false` otherwise.
     */
    verify(circuit: string, input: string): Promise<boolean>;
    /** Calculates the witness for the given circuit and input.
     *
     * If `data` is not passed, the input data will be read from `inputs/<circuit>/<input>.json`.
     *
     * @returns path of the created witness
     */
    witness(circuit: string, input: string, data?: CircuitSignals): Promise<string>;
    /** Exports a JSON input file for some circuit with the given object.
     *
     * This is useful for testing real circuits, or creating an input programmatically.
     * Overwrites an existing input.
     *
     * @returns path of the created input file
     */
    input(circuit: string, input: string, data: CircuitSignals): string;
    /** Export a circuit artifact in JSON format.
     *
     * Returns the JSON object itself, and the path that it would be exported to with
     * respect to the Circomkit configuration.
     *
     * @returns a JSON object or the path that it would be exported to.
     */
    json(type: 'r1cs' | 'zkey' | 'wtns', circuit: string, input?: string): Promise<{
        json: object;
        path: string;
    }>;
    /** Compiles the circuit and returns a witness tester instance. */
    WitnessTester<IN extends string[] = [], OUT extends string[] = []>(circuit: string, circuitConfig: CircuitConfig & {
        recompile?: boolean;
    }): Promise<WitnessTester<IN, OUT>>;
    /** Returns a proof tester. */
    ProofTester<IN extends string[] = []>(circuit: string): Promise<ProofTester<IN>>;
}
