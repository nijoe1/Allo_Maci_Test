import type { CircuitSignals, CircomkitConfig } from '../types/';
/** A tester that is able to generate proofs & verify them.
 * Use `expectFail` and `expectPass` to test out evaluations. */
export declare class ProofTester<IN extends string[] = []> {
    readonly wasmPath: string;
    readonly pkeyPath: string;
    readonly vkeyPath: string;
    readonly protocol: CircomkitConfig['protocol'];
    readonly verificationKey: any;
    constructor(wasmPath: string, pkeyPath: string, vkeyPath: string);
    /** Generate a proof for the witness computed from the given input signals. */
    prove(input: CircuitSignals<IN>): Promise<{
        proof: object;
        publicSignals: string[];
    }>;
    /** Returns the verification result of a proof for some public signals. */
    verify(proof: object, publicSignals: string[]): Promise<boolean>;
    /** Expects a verification to pass for this proof and public signals. */
    expectPass(proof: object, publicSignals: string[]): Promise<void>;
    /** Expects a verification to fail for this proof and public signals. */
    expectFail(proof: object, publicSignals: string[]): Promise<void>;
}
