"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.downloadPtau = exports.getPtauName = void 0;
const fs_1 = require("fs");
const https_1 = require("https");
/** Base PTAU URL as seen in [SnarkJS docs](https://github.com/iden3/snarkjs#7-prepare-phase-2). */
const PTAU_URL_BASE = 'https://storage.googleapis.com/zkevm/ptau';
/**
 * Returns the name of PTAU file for a given number of constraints.
 * @see https://github.com/iden3/snarkjs#7-prepare-phase-2
 * @param n number of constraints
 * @returns name of the PTAU file
 */
function getPtauName(n) {
    // smallest p such that 2^p >= n
    const p = Math.ceil(Math.log2(n));
    let id = ''; // default for large values
    if (p < 8) {
        id = '_08';
    }
    else if (p < 10) {
        id = `_0${p}`;
    }
    else if (p < 28) {
        id = `_${p}`;
    }
    else if (p === 28) {
        id = '';
    }
    else {
        throw new Error('No PTAU for that many constraints!');
    }
    return `powersOfTau28_hez_final${id}.ptau`;
}
exports.getPtauName = getPtauName;
/**
 * Downloads phase-1 powers of tau from Polygon Hermez.
 * @see https://github.com/iden3/snarkjs#7-prepare-phase-2
 * @param ptauName name of PTAU file
 * @param ptauDir directory to download to
 * @returns path to downloaded PTAU file
 */
function downloadPtau(ptauName, ptauDir) {
    const ptauPath = `${ptauDir}/${ptauName}`;
    const file = (0, fs_1.createWriteStream)(ptauPath);
    return new Promise(resolve => {
        (0, https_1.get)(`${PTAU_URL_BASE}/${ptauName}`, response => {
            response.pipe(file);
            file.on('finish', () => {
                file.close();
                resolve(ptauPath);
            });
        });
    });
}
exports.downloadPtau = downloadPtau;
//# sourceMappingURL=ptau.js.map