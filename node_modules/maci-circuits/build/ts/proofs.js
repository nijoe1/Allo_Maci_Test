"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractVk = exports.verifyProof = exports.genProof = void 0;
const maci_crypto_1 = require("maci-crypto");
const snarkjs_1 = require("snarkjs");
const child_process_1 = require("child_process");
const fs_1 = __importDefault(require("fs"));
const os_1 = require("os");
const path_1 = __importDefault(require("path"));
const utils_1 = require("./utils");
/**
 * Generate a zk-SNARK proof
 * @dev if running on a intel chip we use rapidsnark for
 * speed - on the other hand if running on ARM we need to use
 * snark and a WASM witness
 * @param inputs - the inputs to the circuit
 * @param zkeyPath - the path to the zkey
 * @param useWasm - whether we want to use the wasm witness or not
 * @param rapidsnarkExePath - the path to the rapidnsark binary
 * @param witnessExePath - the path to the compiled witness binary
 * @param wasmPath - the path to the wasm witness
 * @param silent - whether we want to print to the console or not
 * @returns the zk-SNARK proof and public signals
 */
const genProof = async ({ inputs, zkeyPath, useWasm, rapidsnarkExePath, witnessExePath, wasmPath, silent = false, }) => {
    // if we want to use a wasm witness we use snarkjs
    if (useWasm) {
        if (!wasmPath) {
            throw new Error("wasmPath must be specified");
        }
        if (!fs_1.default.existsSync(wasmPath)) {
            throw new Error(`wasmPath ${wasmPath} does not exist`);
        }
        const { proof, publicSignals } = await snarkjs_1.groth16.fullProve(inputs, wasmPath, zkeyPath);
        return { proof, publicSignals };
    }
    if ((0, utils_1.isArm)()) {
        throw new Error("To use rapidnsnark you currently need to be running on an intel chip");
    }
    // intel chip flow (use rapidnsark)
    // Create tmp directory
    const tmpPath = path_1.default.resolve((0, os_1.tmpdir)(), `tmp-${Date.now()}`);
    fs_1.default.mkdirSync(tmpPath, { recursive: true });
    const inputJsonPath = path_1.default.resolve(tmpPath, "input.json");
    const outputWtnsPath = path_1.default.resolve(tmpPath, "output.wtns");
    const proofJsonPath = path_1.default.resolve(tmpPath, "proof.json");
    const publicJsonPath = path_1.default.resolve(tmpPath, "public.json");
    // Write input.json
    const jsonData = JSON.stringify((0, maci_crypto_1.stringifyBigInts)(inputs));
    fs_1.default.writeFileSync(inputJsonPath, jsonData);
    // Generate the witness
    (0, child_process_1.execFileSync)(witnessExePath, [inputJsonPath, outputWtnsPath], { stdio: silent ? "ignore" : "pipe" });
    if (!fs_1.default.existsSync(outputWtnsPath)) {
        throw new Error(`Error executing ${witnessExePath} ${inputJsonPath} ${outputWtnsPath}`);
    }
    // Generate the proof
    (0, child_process_1.execFileSync)(rapidsnarkExePath, [zkeyPath, outputWtnsPath, proofJsonPath, publicJsonPath], {
        stdio: silent ? "ignore" : "pipe",
    });
    if (!fs_1.default.existsSync(proofJsonPath)) {
        throw new Error(`Error executing ${rapidsnarkExePath} ${zkeyPath} ${outputWtnsPath} ${proofJsonPath} ${publicJsonPath}`);
    }
    // Read the proof and public inputs
    const proof = JSON.parse(fs_1.default.readFileSync(proofJsonPath).toString());
    const publicSignals = JSON.parse(fs_1.default.readFileSync(publicJsonPath).toString());
    // remove all artifacts
    [proofJsonPath, publicJsonPath, inputJsonPath, outputWtnsPath].forEach((f) => {
        if (fs_1.default.existsSync(f)) {
            fs_1.default.unlinkSync(f);
        }
    });
    // remove tmp directory
    fs_1.default.rmdirSync(tmpPath);
    return { proof, publicSignals };
};
exports.genProof = genProof;
/**
 * Verify a zk-SNARK proof using snarkjs
 * @param publicInputs - the public inputs to the circuit
 * @param proof - the proof
 * @param vk - the verification key
 * @returns whether the proof is valid or not
 */
const verifyProof = async (publicInputs, proof, vk) => {
    const isValid = await snarkjs_1.groth16.verify(vk, publicInputs, proof);
    await (0, utils_1.cleanThreads)();
    return isValid;
};
exports.verifyProof = verifyProof;
/**
 * Extract the Verification Key from a zKey
 * @param zkeyPath - the path to the zKey
 * @returns the verification key
 */
const extractVk = async (zkeyPath) => {
    const vk = await snarkjs_1.zKey.exportVerificationKey(zkeyPath);
    await (0, utils_1.cleanThreads)();
    return vk;
};
exports.extractVk = extractVk;
//# sourceMappingURL=proofs.js.map