"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deploy = void 0;
const maci_contracts_1 = require("maci-contracts");
const utils_1 = require("../utils");
/**
 * Deploy MACI and related contracts
 * @param DeployArgs - The arguments for the deploy command
 * @returns The addresses of the deployed contracts
 */
const deploy = async ({ stateTreeDepth, initialVoiceCredits, initialVoiceCreditsProxyAddress, signupGatekeeperAddress, poseidonT3Address, poseidonT4Address, poseidonT5Address, poseidonT6Address, signer, quiet = true, }) => {
    (0, utils_1.banner)(quiet);
    if (initialVoiceCreditsProxyAddress && initialVoiceCredits) {
        (0, utils_1.logError)("Please provide either an initialVoiceCreditProxyAddress or initialVoiceCredits, not both");
    }
    const network = await signer.provider?.getNetwork();
    const poseidonT3 = poseidonT3Address || (0, utils_1.readContractAddress)("PoseidonT3", network?.name);
    const poseidonT4 = poseidonT4Address || (0, utils_1.readContractAddress)("PoseidonT4", network?.name);
    const poseidonT5 = poseidonT5Address || (0, utils_1.readContractAddress)("PoseidonT5", network?.name);
    const poseidonT6 = poseidonT6Address || (0, utils_1.readContractAddress)("PoseidonT6", network?.name);
    // if we did not deploy it before, then deploy it now
    let initialVoiceCreditProxyContractAddress = initialVoiceCreditsProxyAddress || (0, utils_1.readContractAddress)("InitialVoiceCreditProxy", network?.name);
    if (!initialVoiceCreditsProxyAddress) {
        const contract = await (0, maci_contracts_1.deployConstantInitialVoiceCreditProxy)(initialVoiceCredits || utils_1.DEFAULT_INITIAL_VOICE_CREDITS, signer, true);
        initialVoiceCreditProxyContractAddress = await contract.getAddress();
    }
    // check if we have a signupGatekeeper already deployed or passed as arg
    let signupGatekeeperContractAddress = signupGatekeeperAddress || (0, utils_1.readContractAddress)("SignUpGatekeeper", network?.name);
    if (!signupGatekeeperContractAddress) {
        const contract = await (0, maci_contracts_1.deployFreeForAllSignUpGatekeeper)(signer, true);
        signupGatekeeperContractAddress = await contract.getAddress();
    }
    // deploy a verifier contract
    const verifierContract = await (0, maci_contracts_1.deployVerifier)(signer, true);
    // topup credit
    const topUpCredit = await (0, maci_contracts_1.deployTopupCredit)(signer, true);
    const [verifierContractAddress, topUpCreditAddress] = await Promise.all([
        verifierContract.getAddress(),
        topUpCredit.getAddress(),
    ]);
    // deploy MACI, stateAq, PollFactory and poseidon
    const { maciContract, stateAqContract, pollFactoryContract, poseidonAddrs } = await (0, maci_contracts_1.deployMaci)({
        signUpTokenGatekeeperContractAddress: signupGatekeeperContractAddress,
        initialVoiceCreditBalanceAddress: initialVoiceCreditProxyContractAddress,
        topupCreditContractAddress: topUpCreditAddress,
        poseidonAddresses: {
            poseidonT3,
            poseidonT4,
            poseidonT5,
            poseidonT6,
        },
        signer,
        stateTreeDepth,
        quiet: true,
    });
    const [maciContractAddress, stateAqContractAddress, pollFactoryContractAddress] = await Promise.all([
        maciContract.getAddress(),
        stateAqContract.getAddress(),
        pollFactoryContract.getAddress(),
    ]);
    // save to the JSON File
    (0, utils_1.storeContractAddress)("InitialVoiceCreditProxy", initialVoiceCreditProxyContractAddress, network?.name);
    (0, utils_1.storeContractAddress)("SignUpGatekeeper", signupGatekeeperContractAddress, network?.name);
    (0, utils_1.storeContractAddress)("Verifier", verifierContractAddress, network?.name);
    (0, utils_1.storeContractAddress)("MACI", maciContractAddress, network?.name);
    (0, utils_1.storeContractAddress)("StateAq", stateAqContractAddress, network?.name);
    (0, utils_1.storeContractAddress)("PollFactory", pollFactoryContractAddress, network?.name);
    (0, utils_1.storeContractAddress)("TopupCredit", topUpCreditAddress, network?.name);
    (0, utils_1.storeContractAddress)("PoseidonT3", poseidonAddrs.poseidonT3, network?.name);
    (0, utils_1.storeContractAddress)("PoseidonT4", poseidonAddrs.poseidonT4, network?.name);
    (0, utils_1.storeContractAddress)("PoseidonT5", poseidonAddrs.poseidonT5, network?.name);
    (0, utils_1.storeContractAddress)("PoseidonT6", poseidonAddrs.poseidonT6, network?.name);
    (0, utils_1.logGreen)(quiet, (0, utils_1.success)(`MACI deployed at:  ${maciContractAddress}`));
    // return all addresses
    return {
        maciAddress: maciContractAddress,
        stateAqAddress: stateAqContractAddress,
        pollFactoryAddress: pollFactoryContractAddress,
        verifierAddress: verifierContractAddress,
        topupCreditAddress: topUpCreditAddress,
        poseidonT3Address: poseidonAddrs.poseidonT3,
        poseidonT4Address: poseidonAddrs.poseidonT4,
        poseidonT5Address: poseidonAddrs.poseidonT5,
        poseidonT6Address: poseidonAddrs.poseidonT6,
        signUpGatekeeperAddress: signupGatekeeperContractAddress,
        initialVoiceCreditProxyAddress: initialVoiceCreditProxyContractAddress,
    };
};
exports.deploy = deploy;
//# sourceMappingURL=deploy.js.map