"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.proveOnChain = void 0;
const maci_contracts_1 = require("maci-contracts");
const maci_core_1 = require("maci-core");
const maci_crypto_1 = require("maci-crypto");
const maci_domainobjs_1 = require("maci-domainobjs");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const utils_1 = require("../utils");
/**
 * Command to prove the result of a poll on-chain
 * @param ProveOnChainArgs - The arguments for the proveOnChain command
 */
const proveOnChain = async ({ pollId, proofDir, maciAddress, messageProcessorAddress, tallyAddress, signer, quiet = true, }) => {
    (0, utils_1.banner)(quiet);
    const network = await signer.provider?.getNetwork();
    // check existence of contract addresses
    if (!(0, utils_1.readContractAddress)("MACI", network?.name) && !maciAddress) {
        (0, utils_1.logError)("MACI contract address is empty");
    }
    if (!(0, utils_1.readContractAddress)(`MessageProcessor-${pollId}`, network?.name) && !messageProcessorAddress) {
        (0, utils_1.logError)("MessageProcessor contract address is empty");
    }
    if (!(0, utils_1.readContractAddress)(`Tally-${pollId}`, network?.name) && !tallyAddress) {
        (0, utils_1.logError)("Tally contract address is empty");
    }
    // check validity of contract addresses
    const maciContractAddress = maciAddress || (0, utils_1.readContractAddress)("MACI", network?.name);
    const messageProcessorContractAddress = messageProcessorAddress || (0, utils_1.readContractAddress)(`MessageProcessor-${pollId}`, network?.name);
    const tallyContractAddress = tallyAddress || (0, utils_1.readContractAddress)(`Tally-${pollId}`, network?.name);
    // check contracts are deployed on chain
    if (!(await (0, utils_1.contractExists)(signer.provider, maciContractAddress))) {
        (0, utils_1.logError)("MACI contract does not exist");
    }
    if (!(await (0, utils_1.contractExists)(signer.provider, messageProcessorContractAddress))) {
        (0, utils_1.logError)("MessageProcessor contract does not exist");
    }
    if (!(await (0, utils_1.contractExists)(signer.provider, tallyContractAddress))) {
        (0, utils_1.logError)("Tally contract does not exist");
    }
    const maciContract = maci_contracts_1.MACI__factory.connect(maciContractAddress, signer);
    const pollAddr = await maciContract.polls(pollId);
    if (!(await (0, utils_1.contractExists)(signer.provider, pollAddr))) {
        (0, utils_1.logError)("There is no Poll contract with this poll ID linked to the specified MACI contract.");
    }
    const pollContract = maci_contracts_1.Poll__factory.connect(pollAddr, signer);
    const mpContract = maci_contracts_1.MessageProcessor__factory.connect(messageProcessorContractAddress, signer);
    const tallyContract = maci_contracts_1.Tally__factory.connect(tallyContractAddress, signer);
    const messageAqContractAddress = (await pollContract.extContracts()).messageAq;
    if (!(await (0, utils_1.contractExists)(signer.provider, messageAqContractAddress))) {
        (0, utils_1.logError)("There is no MessageAq contract linked to the specified MACI contract.");
    }
    const messageAqContract = maci_contracts_1.AccQueue__factory.connect(messageAqContractAddress, signer);
    const vkRegistryContractAddress = await tallyContract.vkRegistry();
    if (!(await (0, utils_1.contractExists)(signer.provider, vkRegistryContractAddress))) {
        (0, utils_1.logError)("There is no VkRegistry contract linked to the specified MACI contract.");
    }
    const vkRegistryContract = maci_contracts_1.VkRegistry__factory.connect(vkRegistryContractAddress, signer);
    const verifierContractAddress = await mpContract.verifier();
    if (!(await (0, utils_1.contractExists)(signer.provider, verifierContractAddress))) {
        (0, utils_1.logError)("There is no Verifier contract linked to the specified MACI contract.");
    }
    const verifierContract = maci_contracts_1.Verifier__factory.connect(verifierContractAddress, signer);
    const data = {
        processProofs: [],
        tallyProofs: [],
    };
    let numProcessProofs = 0;
    // read the proof directory
    const filenames = fs_1.default.readdirSync(proofDir);
    // extract all the proofs data
    filenames.forEach((filename) => {
        const filepath = path_1.default.resolve(proofDir, filename);
        let match = filename.match(/process_(\d+)/);
        if (match) {
            data.processProofs[Number(match[1])] = JSON.parse(fs_1.default.readFileSync(filepath).toString());
            numProcessProofs += 1;
            return;
        }
        match = filename.match(/tally_(\d+)/);
        if (match) {
            data.tallyProofs[Number(match[1])] = JSON.parse(fs_1.default.readFileSync(filepath).toString());
        }
    });
    // retrieve the values we need from the smart contracts
    const treeDepths = await pollContract.treeDepths();
    const numSignUpsAndMessages = await pollContract.numSignUpsAndMessages();
    const numSignUps = Number(numSignUpsAndMessages[0]);
    const numMessages = Number(numSignUpsAndMessages[1]);
    const messageBatchSize = maci_core_1.STATE_TREE_ARITY ** Number(treeDepths.messageTreeSubDepth);
    const tallyBatchSize = maci_core_1.STATE_TREE_ARITY ** Number(treeDepths.intStateTreeDepth);
    let totalMessageBatches = numMessages <= messageBatchSize ? 1 : Math.floor(numMessages / messageBatchSize);
    if (numMessages > messageBatchSize && numMessages % messageBatchSize > 0) {
        totalMessageBatches += 1;
    }
    // perform validation
    if (numProcessProofs !== totalMessageBatches) {
        (0, utils_1.logRed)(quiet, (0, utils_1.error)(`The proof files inside ${proofDir} do not have the correct number of message processign proofs` +
            `(expected ${totalMessageBatches}, got ${numProcessProofs}).`));
    }
    let numberBatchesProcessed = Number(await mpContract.numBatchesProcessed());
    const tallyMode = await tallyContract.mode();
    const mpMode = await mpContract.mode();
    if (tallyMode !== mpMode) {
        (0, utils_1.logError)("Tally and MessageProcessor modes are not compatible");
    }
    const messageRootOnChain = await messageAqContract.getMainRoot(Number(treeDepths.messageTreeDepth));
    const stateTreeDepth = Number(await maciContract.stateTreeDepth());
    const onChainProcessVk = await vkRegistryContract.getProcessVk(stateTreeDepth, treeDepths.messageTreeDepth, treeDepths.voteOptionTreeDepth, messageBatchSize, mpMode);
    const dd = await pollContract.getDeployTimeAndDuration();
    const pollEndTimestampOnChain = BigInt(dd[0]) + BigInt(dd[1]);
    if (numberBatchesProcessed < totalMessageBatches) {
        (0, utils_1.logYellow)(quiet, (0, utils_1.info)("Submitting proofs of message processing..."));
    }
    // process all batches left
    for (let i = numberBatchesProcessed; i < totalMessageBatches; i += 1) {
        let currentMessageBatchIndex;
        if (numberBatchesProcessed === 0) {
            const r = numMessages % messageBatchSize;
            currentMessageBatchIndex = numMessages;
            if (currentMessageBatchIndex > 0) {
                if (r === 0) {
                    currentMessageBatchIndex -= messageBatchSize;
                }
                else {
                    currentMessageBatchIndex -= r;
                }
            }
        }
        else {
            currentMessageBatchIndex = (totalMessageBatches - numberBatchesProcessed) * messageBatchSize;
        }
        if (numberBatchesProcessed > 0 && currentMessageBatchIndex > 0) {
            currentMessageBatchIndex -= messageBatchSize;
        }
        const { proof, circuitInputs, publicInputs } = data.processProofs[i];
        // validation
        if (circuitInputs.pollEndTimestamp !== pollEndTimestampOnChain.toString()) {
            (0, utils_1.logError)("pollEndTimestamp mismatch.");
        }
        if (BigInt(circuitInputs.msgRoot).toString() !== messageRootOnChain.toString()) {
            (0, utils_1.logError)("message root mismatch.");
        }
        let currentSbCommitmentOnChain;
        if (numberBatchesProcessed === 0) {
            currentSbCommitmentOnChain = BigInt(await pollContract.currentSbCommitment());
        }
        else {
            currentSbCommitmentOnChain = BigInt(await mpContract.sbCommitment());
        }
        if (currentSbCommitmentOnChain.toString() !== circuitInputs.currentSbCommitment) {
            (0, utils_1.logError)("currentSbCommitment mismatch.");
        }
        const coordPubKeyHashOnChain = BigInt(await pollContract.coordinatorPubKeyHash());
        if ((0, maci_crypto_1.hashLeftRight)(BigInt(circuitInputs.coordPubKey[0]), BigInt(circuitInputs.coordPubKey[1])).toString() !== coordPubKeyHashOnChain.toString()) {
            (0, utils_1.logError)("coordPubKey mismatch.");
        }
        const packedValsOnChain = BigInt(await mpContract.genProcessMessagesPackedVals(currentMessageBatchIndex, numSignUps, numMessages, treeDepths.messageTreeSubDepth, treeDepths.voteOptionTreeDepth)).toString();
        if (circuitInputs.packedVals !== packedValsOnChain) {
            (0, utils_1.logError)("packedVals mismatch.");
        }
        const formattedProof = (0, maci_contracts_1.formatProofForVerifierContract)(proof);
        const publicInputHashOnChain = BigInt(await mpContract.genProcessMessagesPublicInputHash(currentMessageBatchIndex, messageRootOnChain.toString(), numSignUps, numMessages, circuitInputs.currentSbCommitment, circuitInputs.newSbCommitment, treeDepths.messageTreeSubDepth, treeDepths.voteOptionTreeDepth));
        if (publicInputHashOnChain.toString() !== publicInputs[0].toString()) {
            (0, utils_1.logError)("Public input mismatch.");
        }
        const vk = new maci_domainobjs_1.VerifyingKey(new maci_crypto_1.G1Point(onChainProcessVk.alpha1[0], onChainProcessVk.alpha1[1]), new maci_crypto_1.G2Point(onChainProcessVk.beta2[0], onChainProcessVk.beta2[1]), new maci_crypto_1.G2Point(onChainProcessVk.gamma2[0], onChainProcessVk.gamma2[1]), new maci_crypto_1.G2Point(onChainProcessVk.delta2[0], onChainProcessVk.delta2[1]), onChainProcessVk.ic.map(([x, y]) => new maci_crypto_1.G1Point(x, y)));
        // verify the proof onchain using the verifier contract
        const isValidOnChain = await verifierContract.verify(formattedProof, vk.asContractParam(), publicInputHashOnChain.toString());
        if (!isValidOnChain) {
            (0, utils_1.logError)("The verifier contract found the proof invalid.");
        }
        try {
            // validate process messaging proof and store the new state and ballot root commitment
            const tx = await mpContract.processMessages((0, utils_1.asHex)(circuitInputs.newSbCommitment), formattedProof);
            const receipt = await tx.wait();
            if (receipt?.status !== 1) {
                (0, utils_1.logError)("processMessages() failed.");
            }
            (0, utils_1.logYellow)(quiet, (0, utils_1.info)(`Transaction hash: ${receipt.hash}`));
            // Wait for the node to catch up
            numberBatchesProcessed = Number(await mpContract.numBatchesProcessed());
            (0, utils_1.logYellow)(quiet, (0, utils_1.info)(`Progress: ${numberBatchesProcessed} / ${totalMessageBatches}`));
        }
        catch (err) {
            (0, utils_1.logError)(`processMessages() failed: ${err.message}`);
        }
    }
    if (numberBatchesProcessed === totalMessageBatches) {
        (0, utils_1.logGreen)(quiet, (0, utils_1.success)("All message processing proofs have been submitted."));
    }
    // vote tallying proofs
    const totalTallyBatches = numSignUps % tallyBatchSize === 0
        ? Math.floor(numSignUps / tallyBatchSize)
        : Math.floor(numSignUps / tallyBatchSize) + 1;
    let tallyBatchNum = Number(await tallyContract.tallyBatchNum());
    if (tallyBatchNum < totalTallyBatches) {
        (0, utils_1.logYellow)(quiet, (0, utils_1.info)("Submitting proofs of vote tallying..."));
    }
    for (let i = tallyBatchNum; i < totalTallyBatches; i += 1) {
        if (i === 0) {
            await tallyContract.updateSbCommitment().then((tx) => tx.wait());
        }
        const batchStartIndex = i * tallyBatchSize;
        const { proof, circuitInputs, publicInputs } = data.tallyProofs[i];
        const currentTallyCommitmentOnChain = await tallyContract.tallyCommitment();
        if (currentTallyCommitmentOnChain.toString() !== circuitInputs.currentTallyCommitment) {
            (0, utils_1.logError)("currentTallyCommitment mismatch.");
        }
        const packedValsOnChain = BigInt(await tallyContract.genTallyVotesPackedVals(numSignUps, batchStartIndex, tallyBatchSize));
        if (circuitInputs.packedVals !== packedValsOnChain.toString()) {
            (0, utils_1.logError)("packedVals mismatch.");
        }
        const currentSbCommitmentOnChain = await mpContract.sbCommitment();
        if (currentSbCommitmentOnChain.toString() !== circuitInputs.sbCommitment) {
            (0, utils_1.logError)("currentSbCommitment mismatch.");
        }
        const publicInputHashOnChain = await tallyContract.genTallyVotesPublicInputHash(numSignUps, batchStartIndex, tallyBatchSize, circuitInputs.newTallyCommitment);
        if (publicInputHashOnChain.toString() !== publicInputs[0]) {
            (0, utils_1.logError)(`public input mismatch. tallyBatchNum=${i}, onchain=${publicInputHashOnChain.toString()}, offchain=${publicInputs[0].toString()}`);
        }
        // format the tally proof so it can be verified on chain
        const formattedProof = (0, maci_contracts_1.formatProofForVerifierContract)(proof);
        try {
            // verify the proof on chain
            const tx = await tallyContract.tallyVotes((0, utils_1.asHex)(circuitInputs.newTallyCommitment), formattedProof);
            const receipt = await tx.wait();
            if (receipt?.status !== 1) {
                (0, utils_1.logError)("tallyVotes() failed");
            }
            (0, utils_1.logYellow)(quiet, (0, utils_1.info)(`Progress: ${tallyBatchNum + 1} / ${totalTallyBatches}`));
            (0, utils_1.logYellow)(quiet, (0, utils_1.info)(`Transaction hash: ${receipt.hash}`));
            tallyBatchNum = Number(await tallyContract.tallyBatchNum());
        }
        catch (err) {
            (0, utils_1.logError)(err.message);
        }
    }
    if (tallyBatchNum === totalTallyBatches) {
        (0, utils_1.logGreen)(quiet, (0, utils_1.success)("All vote tallying proofs have been submitted."));
    }
};
exports.proveOnChain = proveOnChain;
//# sourceMappingURL=proveOnChain.js.map