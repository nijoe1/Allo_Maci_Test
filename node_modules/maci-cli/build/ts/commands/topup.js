"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.topup = void 0;
const maci_contracts_1 = require("maci-contracts");
const utils_1 = require("../utils");
/**
 * Publish a topup message
 * @param TopupArgs - The arguments for the topup command
 */
const topup = async ({ amount, stateIndex, pollId, maciAddress, signer, quiet = true, }) => {
    (0, utils_1.banner)(quiet);
    const network = await signer.provider?.getNetwork();
    // ensure we have a valid MACI contract address
    if (!maciAddress && !(0, utils_1.readContractAddress)(maciAddress, network?.name)) {
        (0, utils_1.logError)("Invalid MACI contract address");
        return;
    }
    const maciContractAddress = maciAddress || (0, utils_1.readContractAddress)(maciAddress, network?.name);
    if (!(await (0, utils_1.contractExists)(signer.provider, maciContractAddress))) {
        (0, utils_1.logError)("There is no contract deployed at the specified address");
    }
    // validate the params
    if (amount < 1) {
        (0, utils_1.logError)("Topup amount must be greater than 0");
    }
    if (stateIndex < 1) {
        (0, utils_1.logError)("State index must be greater than 0");
    }
    if (pollId < 0) {
        (0, utils_1.logError)("Poll ID must be a positive integer");
    }
    const maciContract = maci_contracts_1.MACI__factory.connect(maciContractAddress, signer);
    const pollAddr = await maciContract.getPoll(pollId);
    if (!(await (0, utils_1.contractExists)(signer.provider, pollAddr))) {
        (0, utils_1.logError)("There is no Poll contract with this poll ID linked to the specified MACI contract.");
    }
    const pollContract = maci_contracts_1.Poll__factory.connect(pollAddr, signer);
    try {
        // submit the topup message on chain
        const tx = await pollContract.topup(stateIndex, amount.toString(), {
            gasLimit: 1000000,
        });
        const receipt = await tx.wait();
        if (receipt?.status !== 1) {
            (0, utils_1.logError)("The transaction failed");
        }
    }
    catch (error) {
        (0, utils_1.logError)(error.message);
    }
};
exports.topup = topup;
//# sourceMappingURL=topup.js.map