"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.logError = exports.error = exports.warning = exports.success = exports.info = exports.logMagenta = exports.logYellow = exports.logGreen = exports.logRed = void 0;
/* eslint-disable no-console */
// Description: This file contains the theme for the CLI
const RESET = "\x1b[0m";
const RED = "\x1b[31m";
const GREEN = "\x1b[32m";
const YELLOW = "\x1b[33m";
const MAGENTA = "\x1b[35m";
/**
 * Print red text to the console (fancy)
 * @param quiet - whether to print the text or not
 * @param text - the text to print
 */
function logRed(quiet, text) {
    if (!quiet) {
        console.log(RED + text + RESET);
    }
}
exports.logRed = logRed;
/**
 * Print green text to the console (fancy)
 * @param quiet - whether to print the text or not
 * @param text - the text to print
 */
function logGreen(quiet, text) {
    if (!quiet) {
        console.log(GREEN + text + RESET);
    }
}
exports.logGreen = logGreen;
/**
 * Print yellow text to the console (fancy)
 * @param quiet - whether to print the text or not
 * @param text - the text to print
 */
function logYellow(quiet, text) {
    if (!quiet) {
        console.log(YELLOW + text + RESET);
    }
}
exports.logYellow = logYellow;
/**
 * Print magenta text to the console (fancy)
 * @param quiet - whether to print the text or not
 * @param text - the text to print
 */
function logMagenta(quiet, text) {
    if (!quiet) {
        console.log(MAGENTA + text + RESET);
    }
}
exports.logMagenta = logMagenta;
/**
 * create an info message
 * @param text - the text to print
 * @returns the text with a prefix
 */
const info = (text) => `[i] ${text}`;
exports.info = info;
/**
 * create a success message
 * @param text - the text to print
 * @returns the text with a prefix
 */
const success = (text) => `[✓] ${text}`;
exports.success = success;
/**
 * create a success message
 * @param text - the text to print
 * @returns the text with a prefix
 */
const warning = (text) => `[!] ${text}`;
exports.warning = warning;
/**
 * create an error message
 * @param text - the text to print
 * @returns the text with a prefix
 */
const error = (text) => `[✗] ${text}`;
exports.error = error;
/**
 * Log an error and throw an error
 * @param text
 */
function logError(text) {
    throw new Error((0, exports.error)(text));
}
exports.logError = logError;
//# sourceMappingURL=theme.js.map