"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../../helpers/constants");
const ContractStorage_1 = require("../../helpers/ContractStorage");
const Deployment_1 = require("../../helpers/Deployment");
const types_1 = require("../../helpers/types");
const deployment = Deployment_1.Deployment.getInstance();
const storage = ContractStorage_1.ContractStorage.getInstance();
/**
 * Deploy step registration and task itself
 */
deployment.deployTask("full:deploy-gatekeepers", "Deploy gatekeepers").then((task) => task.setAction(async ({ incremental }, hre) => {
    deployment.setHre(hre);
    const deployer = await deployment.getDeployer();
    const freeForAllGatekeeperContractAddress = storage.getAddress(types_1.EContracts.FreeForAllGatekeeper, hre.network.name);
    const easGatekeeperContractAddress = storage.getAddress(types_1.EContracts.EASGatekeeper, hre.network.name);
    const deployFreeForAllGatekeeper = deployment.getDeployConfigField(types_1.EContracts.FreeForAllGatekeeper, "deploy");
    const deployEASGatekeeper = deployment.getDeployConfigField(types_1.EContracts.EASGatekeeper, "deploy");
    const skipDeployFreeForAllGatekeeper = deployFreeForAllGatekeeper === false;
    const skipDeployEASGatekeeper = deployEASGatekeeper === false;
    const canSkipDeploy = incremental &&
        (freeForAllGatekeeperContractAddress || skipDeployFreeForAllGatekeeper) &&
        (easGatekeeperContractAddress || skipDeployEASGatekeeper) &&
        (!skipDeployFreeForAllGatekeeper || !skipDeployEASGatekeeper);
    if (canSkipDeploy) {
        return;
    }
    if (!skipDeployFreeForAllGatekeeper) {
        const freeForAllGatekeeperContract = await deployment.deployContract({
            name: types_1.EContracts.FreeForAllGatekeeper,
            signer: deployer,
        });
        await storage.register({
            id: types_1.EContracts.FreeForAllGatekeeper,
            contract: freeForAllGatekeeperContract,
            args: [],
            network: hre.network.name,
        });
    }
    const isSupportedNetwork = ![constants_1.ESupportedChains.Hardhat, constants_1.ESupportedChains.Coverage].includes(hre.network.name);
    if (!skipDeployEASGatekeeper && isSupportedNetwork) {
        const easAddress = deployment.getDeployConfigField(types_1.EContracts.EASGatekeeper, "easAddress", true);
        const encodedSchema = deployment.getDeployConfigField(types_1.EContracts.EASGatekeeper, "schema", true);
        const attester = deployment.getDeployConfigField(types_1.EContracts.EASGatekeeper, "attester", true);
        const easGatekeeperContract = await deployment.deployContract({
            name: types_1.EContracts.EASGatekeeper,
            signer: deployer,
        }, easAddress, attester, encodedSchema);
        await storage.register({
            id: types_1.EContracts.EASGatekeeper,
            contract: easGatekeeperContract,
            args: [easAddress, attester, encodedSchema],
            network: hre.network.name,
        });
    }
}));
//# sourceMappingURL=02-gatekeepers.js.map