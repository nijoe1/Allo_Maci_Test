import type { Proof } from "../../ts/types";
import { IProverParams } from "./types";
/**
 * Prover class is designed to prove message processing and tally proofs on-chain.
 */
export declare class Prover {
    /**
     * Poll contract typechain wrapper
     */
    private pollContract;
    /**
     * MessageProcessor contract typechain wrapper
     */
    private mpContract;
    /**
     * AccQueue contract typechain wrapper (messages)
     */
    private messageAqContract;
    /**
     * MACI contract typechain wrapper
     */
    private maciContract;
    /**
     * VkRegistry contract typechain wrapper
     */
    private vkRegistryContract;
    /**
     * Verifier contract typechain wrapper
     */
    private verifierContract;
    /**
     * Tally contract typechain wrapper
     */
    private tallyContract;
    /**
     * Initialize class properties
     *
     * @param {IProverParams} params - constructor params
     */
    constructor({ pollContract, mpContract, messageAqContract, maciContract, vkRegistryContract, verifierContract, tallyContract, }: IProverParams);
    /**
     * Prove message processing on-chain
     *
     * @param proofs - proofs
     */
    proveMessageProcessing(proofs: Proof[]): Promise<void>;
    /**
     * Prove tally on-chain
     *
     * @param proofs tally proofs
     */
    proveTally(proofs: Proof[]): Promise<void>;
    /**
     * Validate poll end timestamp
     *
     * @param pollEndTimestamp - off-chain poll end timestamp
     * @param pollEndTimestampOnChain - on-chain poll end timestamp
     * @throws error if timestamps don't match
     */
    private validatePollDuration;
    /**
     * Validate message root
     *
     * @param messageRoot - off-chain message root
     * @param messageRootOnChain - on-chain message root
     * @throws error if roots don't match
     */
    private validateMessageRoot;
    /**
     * Validate commitment
     *
     * @param commitment - off-chain commitment
     * @param commitmentOnChain - on-chain commitment
     * @throws error if commitments don't match
     */
    private validateCommitment;
    /**
     * Validate packed values
     *
     * @param packedVals - off-chain packed values
     * @param packedValsOnChain - on-chain packed values
     * @throws error if packed values don't match
     */
    private validatePackedValues;
    /**
     * Validate public input hash
     *
     * @param publicInputHash - off-chain public input hash
     * @param publicInputHashOnChain - on-chain public input hash
     * @throws error if public input hashes don't match
     */
    private validatePublicInput;
}
//# sourceMappingURL=Prover.d.ts.map