"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Prover = void 0;
/* eslint-disable no-console, no-await-in-loop */
const maci_crypto_1 = require("maci-crypto");
const maci_domainobjs_1 = require("maci-domainobjs");
const utils_1 = require("../../ts/utils");
const constants_1 = require("./constants");
/**
 * Prover class is designed to prove message processing and tally proofs on-chain.
 */
class Prover {
    /**
     * Initialize class properties
     *
     * @param {IProverParams} params - constructor params
     */
    constructor({ pollContract, mpContract, messageAqContract, maciContract, vkRegistryContract, verifierContract, tallyContract, }) {
        this.pollContract = pollContract;
        this.mpContract = mpContract;
        this.messageAqContract = messageAqContract;
        this.maciContract = maciContract;
        this.vkRegistryContract = vkRegistryContract;
        this.verifierContract = verifierContract;
        this.tallyContract = tallyContract;
    }
    /**
     * Prove message processing on-chain
     *
     * @param proofs - proofs
     */
    async proveMessageProcessing(proofs) {
        // retrieve the values we need from the smart contracts
        const [treeDepths, numSignUpsAndMessages, numBatchesProcessed, stateTreeDepth, dd, coordinatorPubKeyHash, mode] = await Promise.all([
            this.pollContract.treeDepths(),
            this.pollContract.numSignUpsAndMessages(),
            this.mpContract.numBatchesProcessed().then(Number),
            this.maciContract.stateTreeDepth().then(Number),
            this.pollContract.getDeployTimeAndDuration(),
            this.pollContract.coordinatorPubKeyHash(),
            this.mpContract.mode(),
        ]);
        const numSignUps = Number(numSignUpsAndMessages[0]);
        const numMessages = Number(numSignUpsAndMessages[1]);
        const messageBatchSize = constants_1.STATE_TREE_ARITY ** Number(treeDepths[1]);
        let totalMessageBatches = numMessages <= messageBatchSize ? 1 : Math.floor(numMessages / messageBatchSize);
        let numberBatchesProcessed = numBatchesProcessed;
        if (numMessages > messageBatchSize && numMessages % messageBatchSize > 0) {
            totalMessageBatches += 1;
        }
        const [messageRootOnChain, onChainProcessVk] = await Promise.all([
            this.messageAqContract.getMainRoot(Number(treeDepths[2])),
            this.vkRegistryContract.getProcessVk(stateTreeDepth, treeDepths.messageTreeDepth, treeDepths.voteOptionTreeDepth, messageBatchSize, mode),
        ]);
        const pollEndTimestampOnChain = BigInt(dd[0]) + BigInt(dd[1]);
        if (numberBatchesProcessed < totalMessageBatches) {
            console.log("Submitting proofs of message processing...");
        }
        // process all batches left
        for (let i = numberBatchesProcessed; i < totalMessageBatches; i += 1) {
            let currentMessageBatchIndex;
            if (numberBatchesProcessed === 0) {
                const r = numMessages % messageBatchSize;
                currentMessageBatchIndex = numMessages;
                if (currentMessageBatchIndex > 0) {
                    if (r === 0) {
                        currentMessageBatchIndex -= messageBatchSize;
                    }
                    else {
                        currentMessageBatchIndex -= r;
                    }
                }
            }
            else {
                currentMessageBatchIndex = (totalMessageBatches - numberBatchesProcessed) * messageBatchSize;
            }
            if (numberBatchesProcessed > 0 && currentMessageBatchIndex > 0) {
                currentMessageBatchIndex -= messageBatchSize;
            }
            const { proof, circuitInputs, publicInputs } = proofs[i];
            // validation
            this.validatePollDuration(circuitInputs.pollEndTimestamp, pollEndTimestampOnChain);
            this.validateMessageRoot(circuitInputs.msgRoot, messageRootOnChain);
            let currentSbCommitmentOnChain;
            if (numberBatchesProcessed === 0) {
                currentSbCommitmentOnChain = BigInt(await this.pollContract.currentSbCommitment());
            }
            else {
                currentSbCommitmentOnChain = BigInt(await this.mpContract.sbCommitment());
            }
            this.validateCommitment(circuitInputs.currentSbCommitment, currentSbCommitmentOnChain);
            const coordPubKeyHashOnChain = BigInt(coordinatorPubKeyHash);
            const coordPubKeyHashOffChain = (0, maci_crypto_1.hashLeftRight)(BigInt(circuitInputs.coordPubKey[0]), BigInt(circuitInputs.coordPubKey[1])).toString();
            if (coordPubKeyHashOffChain !== coordPubKeyHashOnChain.toString()) {
                throw new Error("coordPubKey mismatch.");
            }
            const packedValsOnChain = BigInt(await this.mpContract.genProcessMessagesPackedVals(currentMessageBatchIndex, numSignUps, numMessages, treeDepths.messageTreeSubDepth, treeDepths.voteOptionTreeDepth)).toString();
            this.validatePackedValues(circuitInputs.packedVals, packedValsOnChain);
            const formattedProof = (0, utils_1.formatProofForVerifierContract)(proof);
            const publicInputHashOnChain = BigInt(await this.mpContract.genProcessMessagesPublicInputHash(currentMessageBatchIndex, messageRootOnChain.toString(), numSignUps, numMessages, circuitInputs.currentSbCommitment, circuitInputs.newSbCommitment, treeDepths.messageTreeSubDepth, treeDepths.voteOptionTreeDepth));
            this.validatePublicInput(publicInputs[0], publicInputHashOnChain);
            const vk = new maci_domainobjs_1.VerifyingKey(new maci_crypto_1.G1Point(onChainProcessVk.alpha1[0], onChainProcessVk.alpha1[1]), new maci_crypto_1.G2Point(onChainProcessVk.beta2[0], onChainProcessVk.beta2[1]), new maci_crypto_1.G2Point(onChainProcessVk.gamma2[0], onChainProcessVk.gamma2[1]), new maci_crypto_1.G2Point(onChainProcessVk.delta2[0], onChainProcessVk.delta2[1]), onChainProcessVk.ic.map(([x, y]) => new maci_crypto_1.G1Point(x, y)));
            // verify the proof onchain using the verifier contract
            const isValidOnChain = await this.verifierContract.verify(formattedProof, vk.asContractParam(), publicInputHashOnChain.toString());
            if (!isValidOnChain) {
                throw new Error("The verifier contract found the proof invalid.");
            }
            try {
                // validate process messaging proof and store the new state and ballot root commitment
                const receipt = await this.mpContract
                    .processMessages((0, utils_1.asHex)(circuitInputs.newSbCommitment), formattedProof)
                    .then((tx) => tx.wait());
                if (receipt?.status !== 1) {
                    throw new Error("processMessages() failed.");
                }
                console.log(`Transaction hash: ${receipt.hash}`);
                // Wait for the node to catch up
                numberBatchesProcessed = await this.mpContract.numBatchesProcessed().then(Number);
                console.log(`Progress: ${numberBatchesProcessed} / ${totalMessageBatches}`);
            }
            catch (err) {
                throw new Error(`processMessages() failed: ${err.message}`);
            }
        }
        if (numberBatchesProcessed === totalMessageBatches) {
            console.log("All message processing proofs have been submitted.");
        }
    }
    /**
     * Prove tally on-chain
     *
     * @param proofs tally proofs
     */
    async proveTally(proofs) {
        const [treeDepths, numSignUpsAndMessages, tallyBatchNumber] = await Promise.all([
            this.pollContract.treeDepths(),
            this.pollContract.numSignUpsAndMessages(),
            this.tallyContract.tallyBatchNum().then(Number),
        ]);
        const numSignUps = Number(numSignUpsAndMessages[0]);
        const tallyBatchSize = constants_1.STATE_TREE_ARITY ** Number(treeDepths.intStateTreeDepth);
        // vote tallying proofs
        const totalTallyBatches = numSignUps % tallyBatchSize === 0
            ? Math.floor(numSignUps / tallyBatchSize)
            : Math.floor(numSignUps / tallyBatchSize) + 1;
        let tallyBatchNum = tallyBatchNumber;
        if (tallyBatchNum < totalTallyBatches) {
            console.log("Submitting proofs of vote tallying...");
        }
        for (let i = tallyBatchNum; i < totalTallyBatches; i += 1) {
            if (i === 0) {
                await this.tallyContract.updateSbCommitment().then((tx) => tx.wait());
            }
            const batchStartIndex = i * tallyBatchSize;
            const { proof, circuitInputs, publicInputs } = proofs[i];
            const currentTallyCommitmentOnChain = await this.tallyContract.tallyCommitment();
            this.validateCommitment(circuitInputs.currentTallyCommitment, currentTallyCommitmentOnChain);
            const packedValsOnChain = BigInt(await this.tallyContract.genTallyVotesPackedVals(numSignUps, batchStartIndex, tallyBatchSize));
            this.validatePackedValues(circuitInputs.packedVals, packedValsOnChain);
            const currentSbCommitmentOnChain = await this.mpContract.sbCommitment();
            console.log(currentSbCommitmentOnChain, circuitInputs);
            this.validateCommitment(circuitInputs.sbCommitment, currentSbCommitmentOnChain);
            const publicInputHashOnChain = await this.tallyContract.genTallyVotesPublicInputHash(numSignUps, batchStartIndex, tallyBatchSize, circuitInputs.newTallyCommitment);
            this.validatePublicInput(publicInputs[0], publicInputHashOnChain);
            // format the tally proof so it can be verified on chain
            const formattedProof = (0, utils_1.formatProofForVerifierContract)(proof);
            // verify the proof on chain
            const receipt = await this.tallyContract
                .tallyVotes((0, utils_1.asHex)(circuitInputs.newTallyCommitment), formattedProof)
                .then((tx) => tx.wait());
            if (receipt?.status !== 1) {
                throw new Error("tallyVotes() failed");
            }
            console.log(`Progress: ${tallyBatchNum + 1} / ${totalTallyBatches}`);
            console.log(`Transaction hash: ${receipt.hash}`);
            tallyBatchNum = Number(await this.tallyContract.tallyBatchNum());
        }
        if (tallyBatchNum === totalTallyBatches) {
            console.log("All vote tallying proofs have been submitted.");
        }
    }
    /**
     * Validate poll end timestamp
     *
     * @param pollEndTimestamp - off-chain poll end timestamp
     * @param pollEndTimestampOnChain - on-chain poll end timestamp
     * @throws error if timestamps don't match
     */
    validatePollDuration(pollEndTimestamp, pollEndTimestampOnChain) {
        if (pollEndTimestamp.toString() !== pollEndTimestampOnChain.toString()) {
            throw new Error("poll end timestamp mismatch");
        }
    }
    /**
     * Validate message root
     *
     * @param messageRoot - off-chain message root
     * @param messageRootOnChain - on-chain message root
     * @throws error if roots don't match
     */
    validateMessageRoot(messageRoot, messageRootOnChain) {
        if (BigInt(messageRoot).toString() !== messageRootOnChain.toString()) {
            throw new Error("message root mismatch");
        }
    }
    /**
     * Validate commitment
     *
     * @param commitment - off-chain commitment
     * @param commitmentOnChain - on-chain commitment
     * @throws error if commitments don't match
     */
    validateCommitment(currentSbCommitment, currentSbCommitmentOnChain) {
        if (currentSbCommitmentOnChain.toString() !== currentSbCommitment.toString()) {
            throw new Error("commitment mismatch");
        }
    }
    /**
     * Validate packed values
     *
     * @param packedVals - off-chain packed values
     * @param packedValsOnChain - on-chain packed values
     * @throws error if packed values don't match
     */
    validatePackedValues(packedVals, packedValsOnChain) {
        if (packedVals.toString() !== packedValsOnChain.toString()) {
            throw new Error("packedVals mismatch.");
        }
    }
    /**
     * Validate public input hash
     *
     * @param publicInputHash - off-chain public input hash
     * @param publicInputHashOnChain - on-chain public input hash
     * @throws error if public input hashes don't match
     */
    validatePublicInput(publicInputHash, publicInputHashOnChain) {
        if (publicInputHashOnChain.toString() !== publicInputHash.toString()) {
            throw new Error("public input mismatch.");
        }
    }
}
exports.Prover = Prover;
//# sourceMappingURL=Prover.js.map