"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEtherscanApiKeys = exports.getNetworkRpcUrls = exports.NETWORKS_DEFAULT_GAS = exports.STATE_TREE_ARITY = exports.EChainId = exports.ESupportedChains = void 0;
/**
 * Supported networks for deployment and task running
 */
var ESupportedChains;
(function (ESupportedChains) {
    ESupportedChains["Sepolia"] = "sepolia";
    ESupportedChains["OptimismSepolia"] = "optimism_sepolia";
    ESupportedChains["Coverage"] = "coverage";
    ESupportedChains["Hardhat"] = "hardhat";
})(ESupportedChains || (exports.ESupportedChains = ESupportedChains = {}));
/**
 * Supported network chain ids for deployment and task running
 */
var EChainId;
(function (EChainId) {
    EChainId[EChainId["Hardhat"] = 31337] = "Hardhat";
    EChainId[EChainId["OptimismSepolia"] = 11155420] = "OptimismSepolia";
    EChainId[EChainId["Sepolia"] = 11155111] = "Sepolia";
    EChainId[EChainId["Coverage"] = 1337] = "Coverage";
})(EChainId || (exports.EChainId = EChainId = {}));
const GWEI = 1e9;
exports.STATE_TREE_ARITY = 5;
/**
 * Convert gas price from gweguari to wei
 *
 * @param value - gas price in gwei
 * @returns gas price in wei
 */
const gasPrice = (value) => value * GWEI;
/**
 * Gas price settings for supported network
 */
exports.NETWORKS_DEFAULT_GAS = {
    [ESupportedChains.Sepolia]: gasPrice(1),
    [ESupportedChains.OptimismSepolia]: gasPrice(1),
    [ESupportedChains.Coverage]: gasPrice(1),
    [ESupportedChains.Hardhat]: gasPrice(1),
};
/**
 * Get network rpc urls object
 *
 * @returns {Record<ESupportedChains, string>} rpc urls for supported networks
 */
const getNetworkRpcUrls = () => {
    const SEPOLIA_RPC_URL = process.env.SEPOLIA_RPC_URL ?? "";
    const OP_SEPOLIA_RPC_URL = process.env.OP_SEPOLIA_RPC_URL ?? "";
    return {
        [ESupportedChains.Sepolia]: SEPOLIA_RPC_URL,
        [ESupportedChains.OptimismSepolia]: OP_SEPOLIA_RPC_URL,
        [ESupportedChains.Coverage]: "http://localhost:8555",
        [ESupportedChains.Hardhat]: "http://localhost:8545",
    };
};
exports.getNetworkRpcUrls = getNetworkRpcUrls;
const getEtherscanApiKeys = () => ({
    [ESupportedChains.Sepolia]: process.env.ETH_ETHERSCAN_API_KEY,
    [ESupportedChains.OptimismSepolia]: process.env.OPTIMISM_ETHERSCAN_API_KEY,
    [ESupportedChains.Coverage]: undefined,
    [ESupportedChains.Hardhat]: undefined,
});
exports.getEtherscanApiKeys = getEtherscanApiKeys;
//# sourceMappingURL=constants.js.map