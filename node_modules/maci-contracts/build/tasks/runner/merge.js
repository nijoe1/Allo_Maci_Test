"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable no-console */
const ethers_1 = require("ethers");
const config_1 = require("hardhat/config");
const Deployment_1 = require("../helpers/Deployment");
const TreeMerger_1 = require("../helpers/TreeMerger");
const types_1 = require("../helpers/types");
const DEFAULT_SR_QUEUE_OPS = 4;
/**
 * Command to merge signup and message queues of a MACI contract
 */
(0, config_1.task)("merge", "Merge signups and messages")
    .addParam("poll", "The poll id", undefined, config_1.types.string)
    .addOptionalParam("queueOps", "The number of queue operations to perform", DEFAULT_SR_QUEUE_OPS, config_1.types.int)
    .addOptionalParam("prove", "Run prove command after merging", false, config_1.types.boolean)
    .setAction(async ({ poll, prove, queueOps = DEFAULT_SR_QUEUE_OPS }, hre) => {
    const deployment = Deployment_1.Deployment.getInstance(hre);
    deployment.setHre(hre);
    const deployer = await deployment.getDeployer();
    const maciContract = await deployment.getContract({ name: types_1.EContracts.MACI });
    const signupAccQueueContractAddress = await maciContract.stateAq();
    const pollContractAddress = await maciContract.polls(poll);
    const pollContract = await deployment.getContract({ name: types_1.EContracts.Poll, address: pollContractAddress });
    const [, messageAccQueueContractAddress] = await pollContract.extContracts();
    const signupAccQueueContract = await deployment.getContract({
        name: types_1.EContracts.AccQueue,
        address: signupAccQueueContractAddress,
    });
    const messageAccQueueContract = await deployment.getContract({
        name: types_1.EContracts.AccQueue,
        address: messageAccQueueContractAddress,
    });
    if (!pollContractAddress || pollContractAddress === ethers_1.ZeroAddress) {
        throw new Error(`No poll ${poll} found`);
    }
    const treeMerger = new TreeMerger_1.TreeMerger({
        deployer,
        pollContract,
        signupAccQueueContract,
        maciContract,
        messageAccQueueContract,
    });
    const startBalance = await deployer.provider.getBalance(deployer);
    console.log("Start balance: ", Number(startBalance / 10n ** 12n) / 1e6);
    await treeMerger.checkPollOwner();
    await treeMerger.checkPollDuration();
    await treeMerger.mergeSignupSubtrees(poll, queueOps);
    await treeMerger.mergeSignups(poll);
    await treeMerger.mergeMessageSubtrees(queueOps);
    await treeMerger.mergeMessages();
    const endBalance = await deployer.provider.getBalance(deployer);
    console.log("End balance: ", Number(endBalance / 10n ** 12n) / 1e6);
    console.log("Merge expenses: ", Number((startBalance - endBalance) / 10n ** 12n) / 1e6);
    if (prove) {
        console.log(`Prove poll ${poll} results`);
        await hre.run("prove");
    }
});
//# sourceMappingURL=merge.js.map