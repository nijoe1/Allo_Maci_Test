"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable no-await-in-loop */
/* eslint-disable no-console */
const config_1 = require("hardhat/config");
const maci_domainobjs_1 = require("maci-domainobjs");
const fs_1 = __importDefault(require("fs"));
const ContractStorage_1 = require("../helpers/ContractStorage");
const Deployment_1 = require("../helpers/Deployment");
const ProofGenerator_1 = require("../helpers/ProofGenerator");
const Prover_1 = require("../helpers/Prover");
const types_1 = require("../helpers/types");
/**
 * Prove hardhat task for generating off-chain proofs and sending them on-chain
 */
(0, config_1.task)("prove", "Command to generate proof and prove the result of a poll on-chain")
    .addParam("poll", "The poll id", undefined, config_1.types.string)
    .addParam("outputDir", "Output directory for proofs", undefined, config_1.types.string)
    .addParam("coordinatorPrivateKey", "Coordinator maci private key", undefined, config_1.types.string)
    .addOptionalParam("rapidsnark", "Rapidsnark binary path", undefined, config_1.types.string)
    .addParam("processZkey", "Process zkey file path", undefined, config_1.types.string)
    .addOptionalParam("processWitgen", "Process witgen binary path", undefined, config_1.types.string)
    .addOptionalParam("processWasm", "Process wasm file path", undefined, config_1.types.string)
    .addParam("tallyFile", "The file to store the tally proof", undefined, config_1.types.string)
    .addParam("tallyZkey", "Tally zkey file path", undefined, config_1.types.string)
    .addOptionalParam("tallyWitgen", "Tally witgen binary path", undefined, config_1.types.string)
    .addOptionalParam("tallyWasm", "Tally wasm file path", undefined, config_1.types.string)
    .addOptionalParam("stateFile", "The file with the serialized maci state", undefined, config_1.types.string)
    .addFlag("useQuadraticVoting", "Whether to use quadratic voting or not")
    .addOptionalParam("startBlock", "The block number to start fetching logs from", undefined, config_1.types.int)
    .addOptionalParam("blocksPerBatch", "The number of blocks to fetch logs from", undefined, config_1.types.int)
    .addOptionalParam("endBlock", "The block number to stop fetching logs from", undefined, config_1.types.int)
    .addOptionalParam("transactionHash", "The transaction hash of the first transaction", undefined, config_1.types.int)
    .setAction(async ({ outputDir, poll, coordinatorPrivateKey, stateFile, rapidsnark, processZkey, processWitgen, processWasm, tallyZkey, tallyWitgen, tallyWasm, tallyFile, useQuadraticVoting, startBlock, blocksPerBatch, endBlock, transactionHash, }, hre) => {
    const deployment = Deployment_1.Deployment.getInstance();
    deployment.setHre(hre);
    const storage = ContractStorage_1.ContractStorage.getInstance();
    // if we do not have the output directory just create it
    if (!fs_1.default.existsSync(outputDir)) {
        // Create the directory
        fs_1.default.mkdirSync(outputDir);
    }
    const maciPrivateKey = maci_domainobjs_1.PrivKey.deserialize(coordinatorPrivateKey);
    const coordinatorKeypair = new maci_domainobjs_1.Keypair(maciPrivateKey);
    const signer = await deployment.getDeployer();
    const { network } = hre;
    const startBalance = await signer.provider.getBalance(signer);
    console.log("Start balance: ", Number(startBalance / 10n ** 12n) / 1e6);
    const maciContractAddress = storage.mustGetAddress(types_1.EContracts.MACI, network.name);
    const maciContract = await deployment.getContract({ name: types_1.EContracts.MACI, address: maciContractAddress });
    const vkRegistryContract = await deployment.getContract({ name: types_1.EContracts.VkRegistry });
    const verifierContract = await deployment.getContract({ name: types_1.EContracts.Verifier });
    const pollAddress = await maciContract.polls(poll);
    const pollContract = await deployment.getContract({ name: types_1.EContracts.Poll, address: pollAddress });
    const messageAqAddress = await pollContract.extContracts().then((contracts) => contracts.messageAq);
    const messageAq = await deployment.getContract({
        name: types_1.EContracts.AccQueue,
        address: messageAqAddress,
    });
    const [, messageAqContractAddress] = await pollContract.extContracts();
    const messageAqContract = await deployment.getContract({
        name: types_1.EContracts.AccQueue,
        address: messageAqContractAddress,
    });
    const isStateAqMerged = await pollContract.stateAqMerged();
    // Check that the state and message trees have been merged for at least the first poll
    if (!isStateAqMerged && poll.toString() === "0") {
        throw new Error("The state tree has not been merged yet. Please use the mergeSignups subcommmand to do so.");
    }
    const messageTreeDepth = await pollContract.treeDepths().then((depths) => Number(depths[2]));
    // check that the main root is set
    const mainRoot = await messageAqContract.getMainRoot(messageTreeDepth.toString());
    if (mainRoot.toString() === "0") {
        throw new Error("The message tree has not been merged yet. Please use the mergeMessages subcommmand to do so.");
    }
    const maciState = await ProofGenerator_1.ProofGenerator.prepareState({
        maciContract,
        pollContract,
        messageAq,
        maciPrivateKey,
        coordinatorKeypair,
        pollId: poll,
        signer,
        options: {
            stateFile,
            transactionHash,
            startBlock,
            endBlock,
            blocksPerBatch,
        },
    });
    const foundPoll = maciState.polls.get(BigInt(poll));
    if (!foundPoll) {
        throw new Error(`Poll ${poll} not found`);
    }
    const mpContract = await deployment.getContract({
        name: types_1.EContracts.MessageProcessor,
        key: `poll-${poll.toString()}`,
    });
    // get the tally contract based on the useQuadraticVoting flag
    const tallyContract = await deployment.getContract({
        name: types_1.EContracts.Tally,
        key: `poll-${poll.toString()}`,
    });
    const tallyContractAddress = await tallyContract.getAddress();
    const proofGenerator = new ProofGenerator_1.ProofGenerator({
        poll: foundPoll,
        maciContractAddress,
        tallyContractAddress,
        rapidsnark,
        tally: {
            zkey: tallyZkey,
            witgen: tallyWitgen,
            wasm: tallyWasm,
        },
        mp: {
            zkey: processZkey,
            witgen: processWitgen,
            wasm: processWasm,
        },
        outputDir,
        tallyOutputFile: tallyFile,
        useQuadraticVoting,
    });
    const data = {
        processProofs: [],
        tallyProofs: [],
    };
    const prover = new Prover_1.Prover({
        maciContract,
        messageAqContract,
        mpContract,
        pollContract,
        vkRegistryContract,
        verifierContract,
        tallyContract,
    });
    data.processProofs = await proofGenerator.generateMpProofs();
    await prover.proveMessageProcessing(data.processProofs);
    data.tallyProofs = await proofGenerator.generateTallyProofs(network);
    await prover.proveTally(data.tallyProofs);
    const endBalance = await signer.provider.getBalance(signer);
    console.log("End balance: ", Number(endBalance / 10n ** 12n) / 1e6);
    console.log("Prove expenses: ", Number((startBalance - endBalance) / 10n ** 12n) / 1e6);
});
//# sourceMappingURL=prove.js.map