import { type ContractFactory, type Signer, BaseContract } from "ethers";
import type { IDeployMaciArgs, IDeployedMaci, IDeployedPoseidonContracts } from "./types";
import { ConstantInitialVoiceCreditProxy, FreeForAllGatekeeper, MockVerifier, PollFactory, SignUpToken, SignUpTokenGatekeeper, TopupCredit, Verifier, VkRegistry } from "../typechain-types";
/**
 * Link Poseidon libraries to a Smart Contract
 * @param solFileToLink - the name of the contract to link the libraries to
 * @param poseidonT3Address - the address of the PoseidonT3 contract
 * @param poseidonT4Address - the address of the PoseidonT4 contract
 * @param poseidonT5Address - the address of the PoseidonT5 contract
 * @param poseidonT6Address - the address of the PoseidonT6 contract
 * @param signer - the signer to use to deploy the contract
 * @param quiet - whether to suppress console output
 * @returns a contract factory with the libraries linked
 */
export declare const linkPoseidonLibraries: (solFileToLink: string, poseidonT3Address: string, poseidonT4Address: string, poseidonT5Address: string, poseidonT6Address: string, signer?: Signer, quiet?: boolean) => Promise<ContractFactory>;
/**
 * Deploy a Smart Contract given a name and some arguments
 * @param contractName - the name of the contract
 * @param signer - the signer to use to deploy the contract
 * @param quiet - whether to suppress console output
 * @param args - the constructor arguments of the contract
 */
export declare const deployContract: <T extends BaseContract>(contractName: string, signer?: Signer, quiet?: boolean, ...args: unknown[]) => Promise<T>;
/**
 * Deploy a TopupCredit contract
 * @param signer - the signer to use to deploy the contract
 * @param quiet - whether to suppress console output
 * @returns the deployed TopupCredit contract
 */
export declare const deployTopupCredit: (signer?: Signer, quiet?: boolean) => Promise<TopupCredit>;
/**
 * Deploy a VkRegistry contract
 * @param signer - the signer to use to deploy the contract
 * @param quiet - whether to suppress console output
 * @returns the deployed VkRegistry contract
 */
export declare const deployVkRegistry: (signer?: Signer, quiet?: boolean) => Promise<VkRegistry>;
/**
 * Deploy a MockVerifier contract (testing only)
 * @param signer - the signer to use to deploy the contract
 * @param quiet - whether to suppress console output
 * @returns the deployed MockVerifier contract
 */
export declare const deployMockVerifier: (signer?: Signer, quiet?: boolean) => Promise<MockVerifier>;
/**
 * Deploy a Verifier contract
 * @param signer - the signer to use to deploy the contract
 * @param quiet - whether to suppress console output
 * @returns the deployed Verifier contract
 */
export declare const deployVerifier: (signer?: Signer, quiet?: boolean) => Promise<Verifier>;
/**
 * Deploy a constant initial voice credit proxy contract
 * @param signer - the signer to use to deploy the contract
 * @param amount - the amount of initial voice credit to give to each user
 * @param quiet - whether to suppress console output
 * @returns the deployed ConstantInitialVoiceCreditProxy contract
 */
export declare const deployConstantInitialVoiceCreditProxy: (amount: number, signer?: Signer, quiet?: boolean) => Promise<ConstantInitialVoiceCreditProxy>;
/**
 * Deploy a SignUpToken contract
 * @param signer - the signer to use to deploy the contract
 * @param quiet - whether to suppress console output
 * @returns the deployed SignUpToken contract
 */
export declare const deploySignupToken: (signer?: Signer, quiet?: boolean) => Promise<SignUpToken>;
/**
 * Deploy a SignUpTokenGatekeeper contract
 * @param signUpTokenAddress - the address of the SignUpToken contract
 * @param signer - the signer to use to deploy the contract
 * @param quiet - whether to suppress console output
 * @returns a SignUpTokenGatekeeper contract
 */
export declare const deploySignupTokenGatekeeper: (signUpTokenAddress: string, signer?: Signer, quiet?: boolean) => Promise<SignUpTokenGatekeeper>;
/**
 * Deploy a FreeForAllGatekeeper contract
 * @param signer - the signer to use to deploy the contract
 * @param quiet - whether to suppress console output
 * @returns the deployed FreeForAllGatekeeper contract
 */
export declare const deployFreeForAllSignUpGatekeeper: (signer?: Signer, quiet?: boolean) => Promise<FreeForAllGatekeeper>;
/**
 * Deploy Poseidon contracts
 * @param signer - the signer to use to deploy the contracts
 * @param quiet - whether to suppress console output
 * @returns the deployed Poseidon contracts
 */
export declare const deployPoseidonContracts: (signer?: Signer, { poseidonT3, poseidonT4, poseidonT5, poseidonT6 }?: IDeployMaciArgs["poseidonAddresses"], quiet?: boolean) => Promise<IDeployedPoseidonContracts>;
/**
 * Deploy a contract with linked libraries
 * @param contractFactory - the contract factory to use
 * @param name - the name of the contract
 * @param quiet - whether to suppress console output
 * @param args - the constructor arguments of the contract
 * @returns the deployed contract instance
 */
export declare const deployContractWithLinkedLibraries: <T extends BaseContract>(contractFactory: ContractFactory, name: string, quiet?: boolean, ...args: unknown[]) => Promise<T>;
/**
 * Deploy a Poll Factory contract
 * @param signer - the signer object to use to deploy the contract
 * @param quiet - whether to suppress console output
 * @returns the deployed Poll Factory contract
 */
export declare const deployPollFactory: (signer: Signer, quiet?: boolean) => Promise<PollFactory>;
/**
 * Deploy a MACI contract
 * @param {IDeployMaciArgs} args - deploy arguments
 * @returns {IDeployedMaci} the deployed MACI contract
 */
export declare const deployMaci: ({ signUpTokenGatekeeperContractAddress, initialVoiceCreditBalanceAddress, topupCreditContractAddress, signer, poseidonAddresses, stateTreeDepth, useQv, quiet, }: IDeployMaciArgs) => Promise<IDeployedMaci>;
//# sourceMappingURL=deploy.d.ts.map