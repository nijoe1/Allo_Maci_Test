"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.genEmptyBallotRootsContract = void 0;
const maci_crypto_1 = require("maci-crypto");
const maci_domainobjs_1 = require("maci-domainobjs");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const genEmptyBallotRootsContract = () => {
    const template = fs_1.default
        .readFileSync(path_1.default.resolve(__dirname, "..", "templates", "EmptyBallotRoots.sol.template"))
        .toString();
    // This hard-coded value should be consistent with the value of `stateTreeDepth` of MACI.sol
    const stateTreeDepth = process.env.STATE_TREE_DEPTH ? Number.parseInt(process.env.STATE_TREE_DEPTH, 10) : 10;
    let r = "";
    for (let i = 1; i < 6; i += 1) {
        const ballot = new maci_domainobjs_1.Ballot(0, i);
        const z = ballot.hash();
        // The empty Ballot tree root
        const ballotTree = new maci_crypto_1.IncrementalQuinTree(stateTreeDepth, BigInt(z.toString()), 5, maci_crypto_1.hash5);
        r += `    emptyBallotRoots[${i - 1}] = uint256(${ballotTree.root});${i !== 5 ? "\n" : ""}`;
    }
    const generated = template.replace("<% ROOTS %>", r);
    return generated.trim();
};
exports.genEmptyBallotRootsContract = genEmptyBallotRootsContract;
if (require.main === module) {
    const generated = genEmptyBallotRootsContract();
    fs_1.default.writeFileSync(path_1.default.resolve(__dirname, "..", "contracts", "trees", "EmptyBallotRoots.sol"), `${generated}\n`);
}
//# sourceMappingURL=genEmptyBallotRootsContract.js.map