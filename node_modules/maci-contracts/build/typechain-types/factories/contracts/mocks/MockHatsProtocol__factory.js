"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockHatsProtocol__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                internalType: "address",
                name: "account",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "hat",
                type: "uint256",
            },
        ],
        name: "isWearerOfHat",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
];
const _bytecode = "0x608060405234801561001057600080fd5b5060e18061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80634352409a14602d575b600080fd5b603c60383660046075565b6050565b604051901515815260200160405180910390f35b6000816001148060605750816002145b15606b57506001606f565b5060005b92915050565b60008060408385031215608757600080fd5b82356001600160a01b0381168114609d57600080fd5b94602093909301359350505056fea26469706673582212206031cee768f6b1f82309db0b391f9139c2423d0c1629115b15c80d40e9ef463664736f6c63430008140033";
const isSuperArgs = (xs) => xs.length > 1;
class MockHatsProtocol__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static createInterface() {
        return new ethers_1.Interface(_abi);
    }
    static connect(address, runner) {
        return new ethers_1.Contract(address, _abi, runner);
    }
}
exports.MockHatsProtocol__factory = MockHatsProtocol__factory;
MockHatsProtocol__factory.bytecode = _bytecode;
MockHatsProtocol__factory.abi = _abi;
//# sourceMappingURL=MockHatsProtocol__factory.js.map