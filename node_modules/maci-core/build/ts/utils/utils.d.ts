/**
 * This function generates the signature of a ProcessMessage Verifying Key(VK).
 * This can be used to check if a ProcessMessages' circuit VK is registered
 * in a smart contract that holds several VKs.
 * @param stateTreeDepth - The depth of the state tree.
 * @param messageTreeDepth - The depth of the message tree.
 * @param voteOptionTreeDepth - The depth of the vote option tree.
 * @param batchSize - The size of the batch.
 * @returns Returns a signature for querying if a verifying key with the given parameters is already registered in the contract.
 */
export declare const genProcessVkSig: (stateTreeDepth: number, messageTreeDepth: number, voteOptionTreeDepth: number, batchSize: number) => bigint;
/**
 * This function generates the signature of a Tally Verifying Key(VK).
 * This can be used to check if a TallyVotes' circuit VK is registered
 * in a smart contract that holds several VKs.
 * @param _stateTreeDepth - The depth of the state tree.
 * @param _intStateTreeDepth - The depth of the intermediate state tree.
 * @param _voteOptionTreeDepth - The depth of the vote option tree.
 * @returns Returns a signature for querying if a verifying key with
 * the given parameters is already registered in the contract.
 */
export declare const genTallyVkSig: (_stateTreeDepth: number, _intStateTreeDepth: number, _voteOptionTreeDepth: number) => bigint;
/**
 * This function packs it's parameters into a single bigint.
 * @param maxVoteOptions - The maximum number of vote options.
 * @param numUsers - The number of users.
 * @param batchStartIndex - The start index of the batch.
 * @param batchEndIndex - The end index of the batch.
 * @returns Returns a single bigint that contains the packed values.
 */
export declare const packProcessMessageSmallVals: (maxVoteOptions: bigint, numUsers: bigint, batchStartIndex: number, batchEndIndex: number) => bigint;
/**
 * This function unpacks partial values for the ProcessMessages circuit from a single bigint.
 * @param packedVals - The single bigint that contains the packed values.
 * @returns Returns an object that contains the unpacked values.
 */
export declare const unpackProcessMessageSmallVals: (packedVals: bigint) => {
    maxVoteOptions: bigint;
    numUsers: bigint;
    batchStartIndex: bigint;
    batchEndIndex: bigint;
};
/**
 * This function packs it's parameters into a single bigint.
 * @param batchStartIndex - The start index of the batch.
 * @param batchSize - The size of the batch.
 * @param numSignUps - The number of signups.
 * @returns Returns a single bigint that contains the packed values.
 */
export declare const packTallyVotesSmallVals: (batchStartIndex: number, batchSize: number, numSignUps: number) => bigint;
/**
 * This function unpacks partial values for the TallyVotes circuit from a single bigint.
 * @param packedVals - The single bigint that contains the packed values.
 * @returns Returns an object that contains the unpacked values.
 */
export declare const unpackTallyVotesSmallVals: (packedVals: bigint) => {
    numSignUps: bigint;
    batchStartIndex: bigint;
};
//# sourceMappingURL=utils.d.ts.map