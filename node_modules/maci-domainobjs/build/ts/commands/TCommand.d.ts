import type { ICommand, IJsonTCommand } from "./types";
/**
 * @notice Command for submitting a topup request
 */
export declare class TCommand implements ICommand {
    cmdType: bigint;
    stateIndex: bigint;
    amount: bigint;
    pollId: bigint;
    /**
     * Create a new TCommand
     * @param stateIndex the state index of the user
     * @param amount the amount of voice credits
     * @param pollId the poll ID
     */
    constructor(stateIndex: bigint, amount: bigint, pollId: bigint);
    /**
     * Create a deep clone of this TCommand
     * @returns a copy of the TCommand
     */
    copy: <T extends TCommand>() => T;
    /**
     * Check whether this command has deep equivalence to another command
     * @param command the command to compare with
     * @returns whether they are equal or not
     */
    equals: (command: TCommand) => boolean;
    /**
     * Serialize into a JSON object
     */
    toJSON(): IJsonTCommand;
    /**
     * Deserialize into a TCommand object
     * @param json - the json representation
     * @returns the TCommand instance
     */
    static fromJSON(json: IJsonTCommand): TCommand;
}
//# sourceMappingURL=TCommand.d.ts.map